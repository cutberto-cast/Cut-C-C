// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  blogPosts     BlogPost[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  description String
  longDescription String?
  image       String?
  images      String
  technologies String
  type        ProjectType
  status      ProjectStatus @default(DRAFT)
  featured    Boolean  @default(false)
  order       Int      @default(0)
  
  // Links
  repositoryUrl String?
  demoUrl       String?
  videoUrl      String?
  
  // Content
  role          String?
  responsibilities String
  challenges    String
  solutions     String
  metrics       String?
  
  // SEO
  metaTitle     String?
  metaDescription String?
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  publishedAt   DateTime?
  
  // Relations
  authorId      String
  author        User     @relation(fields: [authorId], references: [id])
}

model BlogPost {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  excerpt     String?
  content     String
  image       String?
  status      PostStatus @default(DRAFT)
  featured    Boolean  @default(false)
  order       Int      @default(0)
  
  // SEO
  metaTitle     String?
  metaDescription String?
  
  // Timestamps
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  publishedAt   DateTime?
  
  // Relations
  authorId      String
  author        User     @relation(fields: [authorId], references: [id])
}

model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Skill {
  id        String   @id @default(cuid())
  name      String   @unique
  category  SkillCategory
  level     Int      // 1-100
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Experience {
  id          String   @id @default(cuid())
  company     String
  position    String
  description String
  startDate   DateTime
  endDate     DateTime?
  current     Boolean  @default(false)
  technologies String
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Education {
  id          String   @id @default(cuid())
  institution String
  degree      String
  field       String?
  startDate   DateTime
  endDate     DateTime?
  current     Boolean  @default(false)
  description String?
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum ProjectType {
  FULLSTACK
  FRONTEND
  BACKEND
  MOBILE
  DATA_SCIENCE
  OTHER
}

enum ProjectStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum SkillCategory {
  FRONTEND
  BACKEND
  DATABASE
  DEVOPS
  TOOLS
  LANGUAGES
  FRAMEWORKS
  OTHER
}